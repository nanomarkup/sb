improvements & bugs

core features
    
smart features
    - add metadata to a struct to describe its functionality (use it for generating apps!)
    - use "application", "feature", and "action" items for describing application requirements
    - "application" - kind of application. It includes a set of features
    - "feature" - application feature. It includes a set of actions
    - "action" - to do a work
    - the smart builder behavior:
        - read smart builder application unit using smodule package?
        - read all smart package units using smodule package?
        - generate smart builder unit according to the requirements and available smart packages
            - create "sapp" package for that
        - build the application

tests
    - list all tests

help
    - .sa - smart application unit. Includes a declarative syntax for describing the application
    - .sb - smart builder unit. It can be generated using .sa unit.
    - .sp - smart package unit. It will be created manually but it should be generated in the future. 
            Describes the exported items. The smart builder will use it for generating .sb unit.

example of sa file
sa

apps:
    helloworld

helloworld:    
    name helloworld - optional, default the same as app name    
    type console - optional, default is console
    coder sgo - optional, default is sgo
    entry helloworld/actions - optional, default is [appname/actions]
    features helloworld/features - optional, default is [appname/features]
    
helloworld/actions:
    // sb will supports some common actions
    print "Hello World!"

helloworld/features:
    // describe all supported features
    // the console implementation depends on the current list of features
    commands ...
    database ...
    logger ...
    interaction ...