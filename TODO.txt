improvements & bugs


BAD IDEA: ADD THE ABILITY TO GENERATE SOME CODE BY THE COMPONENT - depends on the input parameter? Use the external application (code generator) for that?
BETTER IDEA: use internal fields for matching them with the dependent params. The internal fields should be initialized before that. 
So, describe the matching mechanism.
Or use reflection? Better to avoid reflection!

Use array of interface{} for initializing the struct. So, check each item and try to convert to the correct type.
Or, push the above array to the dependent component?

USE STRUCT META/TAG IN GOLANG FOR FIELDS!
If dependent item includes required field, then the owner should initialize it using field tag
Or field with tag should be used for item initialization
If the field tag is an array then process all item fields using this tag array

-------------------------

do not limit the number of level for internal initialization the item/struct

-------------------------

Add the ability to internaly initialize parameters in function

func(path/pkg.NewStruct {
    ...initialization
})

-------------------------

Execute functions use the following syntax

[exec] FUNC_PATH.func()

if FUNC_PATH is empty then perfrom the function of the current created object.
if parameter starts with "." then use the current created object

Example,

sb.Starter.AddCommand(&sb.Creator.Command)
>>
[exec] .AddCommand(*.)

-----------------------------

core features
	- add a new "gbuild" command to perform generate and build commands
    - use field tag to mark the required fields?
    
smart features
    - add metadata to a struct to describe its functionality (use it for generating apps!)
    - use "application", "feature", and "action" items for describing application requirements
    - "application" - kind of application. It includes a set of features
    - "feature" - application feature. It includes a set of actions
    - "action" - to do a work
    - the smart builder behavior:
        - read smart builder application unit using smodule package?
        - read all smart package units using smodule package?
        - generate smart builder unit according to the requirements and available smart packages
            - create "sapp" package for that
        - build the application

tests
    - list all tests (update the build system)

help
    - .sa - smart application unit. Includes a declarative syntax for describing the application
    - .sb - smart builder unit. It can be generated using .sa unit.
    - .sp - smart package unit. It will be created manually but it should be generated in the future. 
            Describes the exported items. The smart builder will use it for generating .sb unit.

example of sa file
sa

apps:
    helloworld

helloworld:
    name helloworld - optional, default the same as app name    
    type console - optional, default is console
    coder sgo - optional, default is sgo
    entry helloworld/actions - optional, default is [appname/actions]
    features helloworld/features - optional, default is [appname/features]
    
helloworld/actions:
    // sb will supports some common actions
    print "Hello World!"

helloworld/features:
    // describe all supported features
    // the console implementation depends on the current list of features
    commands ...
    database ...
    logger ...
    interaction ...