improvements & bugs
    - test a global lang parameter
    - update documentation
    - use a short name for functions (try it for adapters)
    - check all methods in interfaces
    - fix all external dependencies - github.com/*
    - validate sb code before running the gen command
    - rename the main item to apps item
    - the apps item can be duplicated - merge all items
    - the sb module will be started with sb word
    - the application should be reference to the item, where the following optional items
        - name - optional, default the same as app name  
        - lang - optional, default is go
        - entry - resolver, mandatory for sb unit
    - resolve interfaces with different number of methods, typeA can have less number of methods than typeB
          fix "Builder    interface{}" to "Builder    builder" of "SmartBuilder" struct in "app" package
    - "new" command creates a new sa file
    - "gen" command generates a new sb file
    - "code" command generates files to build
    - "build" command builds application

core features
    - add a struct initialization into an item use brackets for overriding global settings, usage: field struct { code }
    - use a "named type" as parameter (at least for interfaces)

smart features
    - add metadata to a struct to describe its functionality (use it for generating apps!)
    - use "application", "feature", and "action" items for describing application requirements
    - "application" - kind of application. It includes a set of features
    - "feature" - application feature. It includes a set of actions
    - "action" - to do a work
    - the smart builder behavior:
        - read smart builder application unit using smodule package?
        - read all smart package units using smodule package?
        - generate smart builder unit according to the requirements and available smart packages
            - create "sapp" package for that
        - build the application

tests
    - list all tests

help
    - .sa - smart application unit
    - .sb - smart builder unit
    - .sp - smart package unit. It will be created manually but it should be generated in the future. 


example of a new sb file
sb

apps:
    helloworld

helloworld:
    entry "Hello World!"


example of sa file
sa

apps:
    helloworld helloworld - optional resolver, the default is app name

helloworld:    
    name helloworld - optional, default the same as app name    
    type console - optional, default is console
    lang go - optional, default is go
    entry helloworld/actions - optional, default is [appname/actions]
    features helloworld/features - optional, default is [appname/features]
    
helloworld/actions:
    // sb will supports some common actions
    print "Hello World!"

helloworld/features:
    // describe all supported features
    // the console implementation depends on the current list of features
    commands ...
    database ...
    logger ...
    interaction ...